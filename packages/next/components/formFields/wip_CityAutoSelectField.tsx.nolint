import React, {useCallback, useState} from 'react'
import {
  FormControl,
  FormHelperText,
  InputLabel,
  MenuItem,
  NoSsr,
  Paper,
  OutlinedInput,
  TextField,
  Theme,
  Typography as Type
} from '@material-ui/core'
import {BaseTextFieldProps} from '@material-ui/core/TextField'
import {FormControlProps} from '@material-ui/core/FormControl'
import {makeStyles, useTheme, createStyles} from '@material-ui/styles'
import {FieldProps} from 'formik'
import Select from 'react-select'
import {ValueContainerProps} from 'react-select/lib/components/containers'
import {ControlProps} from 'react-select/lib/components/Control'
import {MenuProps, NoticeProps} from 'react-select/lib/components/Menu'
import {OptionProps} from 'react-select/lib/components/Option'
import {PlaceholderProps} from 'react-select/lib/components/Placeholder'
import {SingleValueProps} from 'react-select/lib/components/SingleValue'
import {ValueType} from 'react-select/lib/types'

export interface OptionType {
  label: string
  value: string
}

type Props = {
  onChange?: (value: string) => void
  fullWidth?: boolean
} & FieldProps<any> &
  FormControlProps

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    // Don't let <TextField/> label cover <Header/>.
    inputLabel: {
      zIndex: 0
    },
    root: {
      flexGrow: 1
      // height: 250
    },
    input: {
      display: 'flex',
      padding: 0,
      height: 'auto'
    },
    valueContainer: {
      display: 'flex',
      flexWrap: 'wrap',
      flex: 1,
      alignItems: 'center',
      overflow: 'hidden'
    },
    noOptionsMessage: {
      padding: theme.spacing(1, 2)
    },
    singleValue: {
      fontSize: 16
    },
    placeholder: {
      position: 'absolute',
      left: 2,
      bottom: 6,
      fontSize: 16
    },
    paper: {
      position: 'absolute',
      zIndex: 1,
      marginTop: theme.spacing(1),
      left: 0,
      right: 0
    },
    divider: {
      height: theme.spacing(2)
    }
  })
)

const cityOptions = [
  'Alta',
  'Applegate',
  'Auburn',
  'Baxter',
  'Colfax',
  'Dutch Flat',
  'Gold Run',
  'Granite Bay',
  'Lincoln',
  'Loomis',
  'Meadow Vista',
  'Newcastle',
  'Penryn',
  'Rocklin',
  'Roseville',
  'Weimar',
  'Other'
].map((reason) => ({
  value: reason,
  label: reason
}))

function NoOptionsMessage(props: NoticeProps<OptionType>) {
  return (
    <Type
      color="textSecondary"
      className={props.selectProps.classes.noOptionsMessage}
      {...props.innerProps}
    >
      {props.children}
    </Type>
  )
}

type InputComponentProps = Pick<BaseTextFieldProps, 'inputRef'> &
  React.HTMLAttributes<HTMLDivElement>

function inputComponent({inputRef, ...props}: InputComponentProps) {
  return <div ref={inputRef} {...props} />
}

function Control(props: ControlProps<OptionType>) {
  return (
    <TextField
      fullWidth
      InputProps={{
        error: true,
        inputComponent,
        inputProps: {
          className: props.selectProps.classes.input,
          inputRef: props.innerRef,
          children: props.children,
          ...props.innerProps
        }
      }}
      required={true}
      variant="outlined"
      {...props.selectProps.TextFieldProps}
    />
  )
}

function Option(props: OptionProps<OptionType>) {
  return (
    <MenuItem
      ref={props.innerRef}
      selected={props.isFocused}
      component="div"
      style={{
        fontWeight: props.isSelected ? 500 : 400
      }}
      {...props.innerProps}
    >
      {props.children}
    </MenuItem>
  )
}

function Placeholder(props: PlaceholderProps<OptionType>) {
  return (
    <Type
      color="textSecondary"
      className={props.selectProps.classes.placeholder}
      {...props.innerProps}
    >
      {props.children}
    </Type>
  )
}

function SingleValue(props: SingleValueProps<OptionType>) {
  return (
    <Type
      className={props.selectProps.classes.singleValue}
      {...props.innerProps}
    >
      {props.children}
    </Type>
  )
}

function ValueContainer(props: ValueContainerProps<OptionType>) {
  return (
    <div className={props.selectProps.classes.valueContainer}>
      {props.children}
    </div>
  )
}

function Menu(props: MenuProps<OptionType>) {
  return (
    <Paper
      square
      className={props.selectProps.classes.paper}
      {...props.innerProps}
    >
      {props.children}
    </Paper>
  )
}

const components = {
  Control,
  Menu,
  // MultiValue,
  NoOptionsMessage,
  Option,
  Placeholder,
  SingleValue,
  ValueContainer
}

const CityAutoSelectField = ({
  field,
  form,
  onChange,
  fullWidth = true,
  required = true,
  ...other
}: Props) => {
  const classes = useStyles()
  const theme = useTheme<Theme>()
  const {name} = field
  const {errors, isSubmitting, handleBlur, touched, setFieldValue} = form
  const [single, setSingle] = useState<ValueType<OptionType>>(null)
  const currentError = errors[name]
  const fieldHasError = Boolean(currentError)
  const fieldWasTouched = Boolean(touched[name])
  const fieldIsTouchedWithError = fieldHasError && fieldWasTouched

  const changeHandler = useCallback(
    (option: ValueType<OptionType>) => {
      setSingle(option)
      console.log(option)
      const fcValue = option.value
      setFieldValue(name, fcValue, true)
      onChange && onChange(fcValue)
    },
    [onChange, setFieldValue, name]
  )

  const selectStyles = {
    input: (base: React.CSSProperties) => ({
      ...base,
      color: theme.palette.text.primary,
      '& input': {
        font: 'inherit'
      }
    })
  }

  return (
    <FormControl
      required={required}
      variant="outlined"
      margin="normal"
      disabled={isSubmitting}
      error={fieldIsTouchedWithError}
      fullWidth={fullWidth}
      {...other}
    >
      <div className={classes.root}>
        <NoSsr>
          {/* <InputLabel
          htmlFor="city-select"
          classes={{
            root: classes.inputLabel
          }}
        >
          City
        </InputLabel> */}
          <Select
            classes={classes}
            styles={selectStyles}
            options={cityOptions}
            components={components}
            value={single}
            onChange={changeHandler}
            placeholder="City"
            onBlur={handleBlur}

            // required={required}
            // autoWidth={true}
            // input={
            //   <OutlinedInput
            //     id="reason-select"
            //     name={name}
            //     labelWidth={228}
            //     error={fieldIsTouchedWithError}
            //   />
            // }
            // SelectDisplayProps={{style: {minWidth: 70}}}
          >
            {/* {CITY_LIST.map((city) => (
            <MenuItem key={city} value={city}>
              {city}
            </MenuItem>
          ))} */}
          </Select>
        </NoSsr>
      </div>
      <FormHelperText error={fieldIsTouchedWithError}>
        {fieldIsTouchedWithError ? currentError : null}
      </FormHelperText>
    </FormControl>
  )
}

export default CityAutoSelectField
