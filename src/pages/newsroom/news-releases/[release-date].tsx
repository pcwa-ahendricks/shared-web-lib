import React, {
  useMemo,
  useState,
  useEffect,
  useCallback,
  useContext
} from 'react'
import {GetStaticPaths, GetStaticProps} from 'next'
import PageLayout from '@components/PageLayout/PageLayout'
import MainBox from '@components/boxes/MainBox'
import {
  fileNameUtil,
  getMediaPages,
  Page,
  findMediaForPages
} from '@lib/services/cosmicService'
import PDFPage from '@components/PDFPage/PDFPage'
import {
  useMediaQuery,
  Box,
  Typography as Type,
  Divider,
  Breadcrumbs,
  LinearProgress
} from '@mui/material'
import {RowBox, ChildBox, ColumnBox} from '@components/MuiSleazebox'
import {format, parseJSON, isValid} from 'date-fns'
import ErrorPage from '@pages/_error'
import UndoIcon from '@mui/icons-material/UndoOutlined'
import DocIcon from '@mui/icons-material/DescriptionOutlined'
import {useRouter} from 'next/router'
import fetcher from '@lib/fetcher'
import {paramToStr} from '@lib/queryParamToStr'
import DownloadResourceFab from '@components/dynamicImgixPage/DownloadResourceFab'
import slugify from 'slugify'
import {
  newsReleaseDateFrmt,
  newsReleasesUrl,
  NewsReleaseMediaResponse,
  NewsReleaseMediaResponses
} from '@lib/types/newsReleases'
import {setCenterProgress, UiContext} from '@components/ui/UiStore'
import useTheme from '@hooks/useTheme'
import Link from '@components/Link'
// const isDev = process.env.NODE_ENV === 'development'

type Props = {
  err?: any
  media?: NewsReleaseMediaResponse
}

const DynamicNewsReleasePage = ({media, err}: Props) => {
  const theme = useTheme()
  const uiContext = useContext(UiContext)
  const {dispatch: uiDispatch} = uiContext

  const isSMDown = useMediaQuery(theme.breakpoints.down('md'))
  const isXS = useMediaQuery(theme.breakpoints.only('xs'))

  const router = useRouter()
  const style = {
    pageNo: {
      cursor: 'default'
    },
    bcLink: {
      display: 'flex',
      cursor: 'pointer'
    },
    bcIcon: {
      alignSelf: 'center',
      marginRight: theme.spacing(0.5),
      width: 20,
      height: 20
    }
  }

  const [additionalPages, setAdditionalPages] = useState<Page[]>([])
  const [loadingAddPages, setLoadingAddPages] = useState<boolean>()

  const mediaPageHandler = useCallback(async () => {
    const pages = await getMediaPages(media?.imgix_url)
    if (pages) {
      const addPages = pages.slice(1)
      setAdditionalPages(addPages)
    }
    setLoadingAddPages(false)
  }, [media])

  useEffect(() => {
    setLoadingAddPages(true)
    mediaPageHandler()
  }, [mediaPageHandler])

  const progressEl = useMemo(
    () =>
      loadingAddPages ? (
        <ColumnBox width="100%">
          <LinearProgress color="secondary" />
        </ColumnBox>
      ) : null,
    [loadingAddPages]
  )

  const newsReleaseDateFormatted = useMemo(() => {
    const pubDate = media?.derivedFilenameAttr?.publishedDate ?? ''
    const parsedPubDate = parseJSON(pubDate)
    return isValid(parsedPubDate)
      ? format(parsedPubDate, "EEEE',' MMMM do',' yyyy")
      : ''
  }, [media?.derivedFilenameAttr?.publishedDate])

  // console.log('media', media)
  // console.log('err', err)
  // console.log('isFallback', router.isFallback)

  useEffect(() => {
    if (router.isFallback) {
      uiDispatch(setCenterProgress(true))
    } else {
      uiDispatch(setCenterProgress(false))
    }
  }, [router.isFallback, uiDispatch])

  if (err?.statusCode) {
    return <ErrorPage statusCode={err.statusCode} />
  } else if (!media && router.isFallback) {
    console.log('No media. Page is in fallback mode.')
  } else if (!media && !router.isFallback) {
    console.log(
      'No media. Page is not in fallback mode. Returning Page Not Found.'
    )
    return <ErrorPage statusCode={404} />
  }

  const publishDate = media?.derivedFilenameAttr?.date
  const downloadAs = slugify(media?.original_name ?? '')
  const pageCount = additionalPages.length + 1

  return (
    <PageLayout title={`News Release ${publishDate}`}>
      {/* Don't use top margin with main box since we want to fill the bgcolor. */}
      {/* Need to use a white background with the News Releases due to the white background (non-transparent) generated by Imgix for the PCWA letterhead section.  */}
      <MainBox mt={0} bgcolor={theme.palette.common.white}>
        <RowBox
          responsive
          px={3}
          pt={3}
          justifyContent="space-between"
          flexSpacing={2}
        >
          <ChildBox>
            <Breadcrumbs aria-label="breadcrumb">
              <Link
                color="inherit"
                sx={{...style.bcLink}}
                href="/newsroom/news-releases"
              >
                <>
                  <UndoIcon sx={{...style.bcIcon}} />
                  News Releases
                </>
              </Link>
              <Type color="textPrimary" sx={{display: 'flex'}}>
                <DocIcon sx={{...style.bcIcon}} />
                {newsReleaseDateFormatted}
              </Type>
            </Breadcrumbs>
          </ChildBox>
          {/* z-index allow <Fab/> to float w/ shadow above image below. */}
          <ChildBox flexShrink={0} zIndex={1}>
            <DownloadResourceFab
              caption="Download News Release"
              aria-label="Download news release"
              size={isSMDown ? 'small' : 'medium'}
              href={`${media?.imgix_url}?dl=${downloadAs}`}
              fileSize={media?.size}
            />
          </ChildBox>
        </RowBox>
        <PDFPage
          // Fixes SSR issue with infinite spinner on SSR loads. Assumes that if the additional pages are done loading that the first page is likely done loading.
          showLoading={loadingAddPages}
          alt={`News release document image for ${publishDate} - page 1/${pageCount}`}
          url={media?.imgix_url ?? ''}
        />
        <Divider />
        {progressEl}
        {additionalPages.map(({number, url}) => (
          <Box position="relative" key={number}>
            {number >= 2 && !isXS ? (
              <RowBox
                id={`page-${number}`}
                position="absolute"
                zIndex={1}
                top={15}
                textAlign="center"
                justifyContent="center"
                width="100%"
                fontStyle="italic"
                sx={{...style.pageNo}}
              >
                <Type color="primary">{`Page ${number}`}</Type>
              </RowBox>
            ) : null}
            <PDFPage
              // showLoading={true}
              alt={`News release document image for ${publishDate} - page ${number}/${pageCount}`}
              url={url}
            />
            <Divider />
          </Box>
        ))}
      </MainBox>
    </PageLayout>
  )
}

export const getStaticPaths: GetStaticPaths = async () => {
  try {
    // const baseUrl = process.env.NEXT_PUBLIC_BASE_URL
    // const data: PickedMediaResponses | undefined = await fetcher(
    //   `${baseUrl}${newsReleasesUrl}`
    // )
    // if (isDev) {
    //   const debug =
    //     data && Array.isArray(data)
    //       ? data
    //           .map((nr) => ({
    //             ...nr,
    //             derivedFilenameAttr: fileNameUtil(
    //               nr.original_name,
    //               DATE_FNS_FORMAT
    //             )
    //           }))
    //           .filter((nr) => !nr.derivedFilenameAttr.date)
    //           .map((nr) => nr.original_name)
    //       : []
    //   debug.forEach((i) => console.log(`Debug News Release: ${i}`))
    // }
    // const paths =
    //   data && Array.isArray(data)
    //     ? data
    //         .map((nr) => ({
    //           ...nr,
    //           derivedFilenameAttr: fileNameUtil(
    //             nr.original_name,
    //             DATE_FNS_FORMAT
    //           )
    //         }))
    //         .filter((nr) => nr.derivedFilenameAttr.date) // Don't allow empty since those will cause runtime errors in development and errors during Vercel deploy.
    //         .map((nr) => ({
    //           params: {
    //             'release-date': nr.derivedFilenameAttr.date
    //           }
    //         }))
    //     : []
    return {
      fallback: true,
      paths: []
    }
  } catch (error) {
    console.log(error)
    return {
      paths: [],
      fallback: true
    }
  }
}

export const getStaticProps: GetStaticProps = async ({params}) => {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL
    const data: NewsReleaseMediaResponses | undefined = await fetcher(
      `${baseUrl}${newsReleasesUrl}`
    )
    const nrs =
      data && Array.isArray(data)
        ? data.map((nr) => ({
            ...nr,
            derivedFilenameAttr: fileNameUtil(
              nr.original_name,
              newsReleaseDateFrmt
            )
          }))
        : []
    const releaseDate = paramToStr(params?.['release-date'])
    const media = await findMediaForPages(nrs, releaseDate)

    // if (!media || !releaseDate) {
    //   throw 'No media or no release date'
    // }

    return {
      props: {
        media
      },
      revalidate: 5
    }
  } catch (error) {
    console.log(error)
    return {props: {err: {statusCode: 400}}}
  }
}

export default DynamicNewsReleasePage
